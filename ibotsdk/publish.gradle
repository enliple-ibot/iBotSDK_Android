apply plugin: 'maven-publish'
apply plugin: 'signing'


task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}


artifacts {
    archives androidSourcesJar
}


group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

publishing {
    publications {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            if (project.plugins.findPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }

//            artifact androidSourcesJar

            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'ibot sdk android'
                url = 'https://github.com/enliple-ibot/iBotSDK_Android'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/enliple-ibot/iBotSDK_Android/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'enliple'
                        name = 'enliple'
                        email = 'ibot@enliple.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/enliple-ibot/iBotSDK_Android.git'
                    developerConnection = 'scm:git:ssh://github.com:enliple-ibot/iBotSDK_Android.git'
                    url = 'https://github.com/enliple-ibot/iBotSDK_Android'
                }

                withXml {
//                    def repositoriesNode = asNode().appendNode('repositories')
//                    def repositoryNode = repositoriesNode.appendNode('repository')
//                    repositoryNode.appendNode('id', 'MyLocalLib')
//                    repositoryNode.appendNode('name', 'MyLocalLib')
//                    repositoryNode.appendNode('url', 'file://${project.basedir}/libs')

                    def dependenciesNode = asNode().appendNode('dependencies')
//                    def dependencyNode1 = dependenciesNode.appendNode('dependency')
//                    dependencyNode1.appendNode('groupId', 'com.nostra13.universalimageloader')
//                    dependencyNode1.appendNode('artifactId', 'universal-image-loader')
//                    dependencyNode1.appendNode('version', '1.9.5')
//                    dependencyNode1.appendNode('scope', 'implementation')

                    project.configurations.implementation.allDependencies.each {
                        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')

                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

//nexusStaging {
//    packageGroup = PUBLISH_GROUP_ID
//    stagingProfileId = sonatypeStagingProfileId
//    username = ossrhUsername
//    password = ossrhPassword
//}

signing {
    sign publishing.publications
}
